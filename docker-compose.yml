x-frontend:
  &frontend
  build: ./Frontend/ # <-- Путь к Dockerfile для Frontend
  image: custom-frontend:1.0
  ports:
    - "3000:3000"

x-airflow-common:
  &airflow-common
  build: ./Airflow/
  image: custom-airflow:2.7.1
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__CORE__FERNET_KEY: ''
  volumes:
    - ./Airflow/dags:/opt/airflow/dags
    - ./Airflow/logs:/opt/airflow/logs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./postgres-airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  entity_matching_service:
    build: ./Matching Service/
    image: custom-entity-matching-service:1.0
    environment:
      REDIS_HOST: redis # Это имя сервиса Redis в вашем docker-compose.yml
      REDIS_PORT: 6379
    ports:
      - "7001:7000"
    depends_on:
      redis:
        condition: service_healthy
    restart: always
  ner:
    build: ./NER/
    image: ner:1.0
    environment:
      REDIS_HOST: redis # Это имя сервиса Redis в вашем docker-compose.yml
      REDIS_PORT: 6379
    ports:
      - "7002:6000"
    depends_on:
      redis:
        condition: service_healthy
    restart: always
  redis:
    image: redis:latest
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    ports:
      - "6379:6379" # Maps port 6379 on the host to port 6379 in the container
    restart: always

  # rabbitmq: # user: rmuser, password: rmpassword
  #   image: rabbitmq:3-management
  #   hostname: rabbitmq
  #   restart: always
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=rmuser
  #     - RABBITMQ_DEFAULT_PASS=rmpassword
  #     - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
  #   healthcheck:
  #     test: ["CMD", "ping", "rabbitmqctl", "node_health_check"]
  #     interval: 10s
  #     timeout: 30s
  #     retries: 50
  #     start_period: 30s
  #   volumes:
  #     - ./Rabbitmq:/var/lib/Rabbitmq
  #   ports:
  #     - "5672:5672"  # AMQP port
  #     - "15672:15672" # Management UI port

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opt/airflow/logs /opt/airflow/dags
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  db:
    image: postgres:15
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: example
      POSTGRES_PASSWORD: example
      POSTGRES_DB: example
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      retries: 5
      start_period: 5s
    volumes:
      - ./Postgres:/var/lib/postgresql/data
      - ./Postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # Добавьте эту строку
    ports:
      - 5432:5432
  adminer:
    image: adminer
    restart: always
    ports:
      - 4040:8080
  ollama:
    image: ollama/ollama
    ports:
      - "8081:11434"
    volumes:
      - ./ollama_data:/root/.ollama
    restart: always
    entrypoint: ["/bin/bash", "-c", "ollama serve & sleep 5 && ollama pull gemma3:27b && wait"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/"] # Simple health check for Ollama API
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
  prediction:
    build: ./Prediction Service/
    container_name: prediction_service
    ports:
      - "8002:6000"
    restart: always 
    volumes:
      - ./Prediction Service:/app
  # pinecone need to be changed to production version!!!!
  # dense-index:
  #   image: ghcr.io/pinecone-io/pinecone-index:latest
  #   container_name: dense-index
  #   environment:
  #     PORT: 5081
  #     INDEX_TYPE: serverless
  #     VECTOR_TYPE: dense
  #     DIMENSION: 2 
  #     METRIC: cosine
  #   ports:
  #     - "5081:5081"
  #   platform: linux/amd64
  # sparse-index:
  #   image: ghcr.io/pinecone-io/pinecone-index:latest
  #   container_name: sparse-index
  #   environment:
  #     PORT: 5082
  #     INDEX_TYPE: serverless
  #     VECTOR_TYPE: sparse
  #     DIMENSION: 0
  #     METRIC: dotproduct
  #   ports:
  #     - "5082:5082"
  #   platform: linux/amd64

volumes:
  postgres-airflow:
  # Rabbitmq:
  Postgres:
  ollama_data: